// <auto-generated />
using System;
using FootTeamTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootTeamTracker.Data.Migrations
{
    [DbContext(typeof(FootTeamTrackerDbContext))]
    partial class FootTeamTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppUserMatch", b =>
                {
                    b.Property<Guid>("AppUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UpcomingGamesId")
                        .HasColumnType("int");

                    b.HasKey("AppUsersId", "UpcomingGamesId");

                    b.HasIndex("UpcomingGamesId");

                    b.ToTable("AppUserMatch");
                });

            modelBuilder.Entity("AppUserPlayer", b =>
                {
                    b.Property<Guid>("AppUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FavouritePlayersId")
                        .HasColumnType("int");

                    b.HasKey("AppUsersId", "FavouritePlayersId");

                    b.HasIndex("FavouritePlayersId");

                    b.ToTable("AppUserPlayer");
                });

            modelBuilder.Entity("AppUserTeam", b =>
                {
                    b.Property<Guid>("AppUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FavouriteTeamsId")
                        .HasColumnType("int");

                    b.HasKey("AppUsersId", "FavouriteTeamsId");

                    b.HasIndex("FavouriteTeamsId");

                    b.ToTable("AppUserTeam");
                });

            modelBuilder.Entity("AppUserTrainingSession", b =>
                {
                    b.Property<Guid>("AppUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TrainingSessionsToAttendId")
                        .HasColumnType("int");

                    b.HasKey("AppUsersId", "TrainingSessionsToAttendId");

                    b.HasIndex("TrainingSessionsToAttendId");

                    b.ToTable("AppUserTrainingSession");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Injury", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedRecoveryTime")
                        .HasColumnType("time");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Injuries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpectedRecoveryTime = new TimeSpan(12599999400),
                            PlayerId = 1,
                            Type = "Sprained Ankle"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpectedRecoveryTime = new TimeSpan(9599999400),
                            PlayerId = 2,
                            Type = "Muscle Strain"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpectedRecoveryTime = new TimeSpan(8399999400),
                            PlayerId = 3,
                            Type = "Hamstring Injury"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpectedRecoveryTime = new TimeSpan(7199999400),
                            PlayerId = 4,
                            Type = "Knee Ligament Tear"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpectedRecoveryTime = new TimeSpan(2399999400),
                            PlayerId = 5,
                            Type = "Concussion"
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2024, 2, 8, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7550),
                            HomeTeamName = "Arsenal",
                            StadiumId = 1
                        },
                        new
                        {
                            Id = 14,
                            AwayTeamName = "Manchester United",
                            Date = new DateTime(2024, 3, 1, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7609),
                            HomeTeamName = "Arsenal",
                            StadiumId = 1
                        },
                        new
                        {
                            Id = 15,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2024, 2, 7, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7617),
                            HomeTeamName = "Real Madrid",
                            StadiumId = 1
                        },
                        new
                        {
                            Id = 1,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2024, 3, 12, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7625),
                            HomeTeamName = "Arsenal",
                            StadiumId = 2
                        },
                        new
                        {
                            Id = 2,
                            AwayTeamName = "PSG",
                            Date = new DateTime(2024, 3, 14, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7636),
                            HomeTeamName = "Arsenal",
                            StadiumId = 2
                        },
                        new
                        {
                            Id = 3,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2024, 3, 15, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7645),
                            HomeTeamName = "PSG",
                            StadiumId = 2
                        },
                        new
                        {
                            Id = 4,
                            AwayTeamName = "Real Madrid",
                            Date = new DateTime(2024, 9, 6, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7652),
                            HomeTeamName = "Arsenal",
                            StadiumId = 3
                        },
                        new
                        {
                            Id = 5,
                            AwayTeamName = "PSG",
                            Date = new DateTime(2024, 5, 18, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7660),
                            HomeTeamName = "Arsenal",
                            StadiumId = 3
                        },
                        new
                        {
                            Id = 6,
                            AwayTeamName = "Real Madrid",
                            Date = new DateTime(2024, 8, 26, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7672),
                            HomeTeamName = "Manchester United",
                            StadiumId = 3
                        },
                        new
                        {
                            Id = 7,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2023, 10, 12, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7680),
                            HomeTeamName = "Arsenal",
                            StadiumId = 4
                        },
                        new
                        {
                            Id = 8,
                            AwayTeamName = "PSG",
                            Date = new DateTime(2023, 10, 21, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7687),
                            HomeTeamName = "Manchester United",
                            StadiumId = 4
                        },
                        new
                        {
                            Id = 9,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2024, 12, 4, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7695),
                            HomeTeamName = "Arsenal",
                            StadiumId = 4
                        },
                        new
                        {
                            Id = 10,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2024, 1, 30, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7703),
                            HomeTeamName = "Arsenal",
                            StadiumId = 5
                        },
                        new
                        {
                            Id = 11,
                            AwayTeamName = "PSG",
                            Date = new DateTime(2024, 2, 29, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7710),
                            HomeTeamName = "Arsenal",
                            StadiumId = 5
                        },
                        new
                        {
                            Id = 12,
                            AwayTeamName = "Barcelona",
                            Date = new DateTime(2023, 10, 28, 23, 56, 18, 98, DateTimeKind.Local).AddTicks(7718),
                            HomeTeamName = "PSG",
                            StadiumId = 5
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "The team secured a victory in the championship match.",
                            Date = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "Champions.jpg",
                            TeamId = 1,
                            Title = "Team Wins Championship"
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("InjuryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1995, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 10,
                            Goals = 5,
                            InjuryId = 0,
                            Name = "Bukayo Saka",
                            Position = 0,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1998, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 12,
                            Goals = 2,
                            InjuryId = 0,
                            Name = "Martin Odegaard",
                            Position = 2,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1993, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 8,
                            Goals = 0,
                            InjuryId = 0,
                            Name = "Ben White",
                            Position = 1,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1997, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 15,
                            Goals = 10,
                            InjuryId = 0,
                            Name = "Lionel Messi",
                            Position = 0,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1990, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 5,
                            Goals = 0,
                            InjuryId = 0,
                            Name = "David De Gea",
                            Position = 3,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1985, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 900,
                            Goals = 800,
                            InjuryId = 0,
                            Name = "Cristiano Ronaldo",
                            Position = 0,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1992, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 500,
                            Goals = 300,
                            InjuryId = 0,
                            Name = "Neymar Jr",
                            Position = 0,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1991, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 300,
                            Goals = 20,
                            InjuryId = 0,
                            Name = "Virgil van Dijk",
                            Position = 1,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(1991, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 400,
                            Goals = 100,
                            InjuryId = 0,
                            Name = "Kevin De Bruyne",
                            Position = 2,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(1998, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 200,
                            Goals = 150,
                            InjuryId = 0,
                            Name = "Kylian Mbappé",
                            Position = 0,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 11,
                            DateOfBirth = new DateTime(1988, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 600,
                            Goals = 400,
                            InjuryId = 0,
                            Name = "Robert Lewandowski",
                            Position = 0,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 12,
                            DateOfBirth = new DateTime(1986, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 700,
                            Goals = 100,
                            InjuryId = 0,
                            Name = "Sergio Ramos",
                            Position = 1,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 13,
                            DateOfBirth = new DateTime(1991, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 400,
                            Goals = 50,
                            InjuryId = 0,
                            Name = "Kevin Mbappe",
                            Position = 2,
                            TeamId = 5
                        },
                        new
                        {
                            Id = 14,
                            DateOfBirth = new DateTime(1992, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 300,
                            Goals = 0,
                            InjuryId = 0,
                            Name = "Alisson Becker",
                            Position = 3,
                            TeamId = 5
                        },
                        new
                        {
                            Id = 15,
                            DateOfBirth = new DateTime(1992, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GamesPlayed = 400,
                            Goals = 200,
                            InjuryId = 0,
                            Name = "Mohamed Salah",
                            Position = 0,
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stadiums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "London, England",
                            Name = "Wembley Stadium",
                            SeatingCapacity = 90000
                        },
                        new
                        {
                            Id = 2,
                            Location = "Barcelona, Spain",
                            Name = "Camp Nou",
                            SeatingCapacity = 99354
                        },
                        new
                        {
                            Id = 3,
                            Location = "Munich, Germany",
                            Name = "Allianz Arena",
                            SeatingCapacity = 75000
                        },
                        new
                        {
                            Id = 4,
                            Location = "Manchester, England",
                            Name = "Old Trafford",
                            SeatingCapacity = 74609
                        },
                        new
                        {
                            Id = 5,
                            Location = "Milan, Italy",
                            Name = "San Siro",
                            SeatingCapacity = 80018
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Logo = "arsenal_logo_PNG1.png",
                            Name = "Arsenal",
                            StadiumId = 1
                        },
                        new
                        {
                            Id = 2,
                            Logo = "Barcelona-Logo-PNG1.png",
                            Name = "Barcelona",
                            StadiumId = 2
                        },
                        new
                        {
                            Id = 3,
                            Logo = "PSG-Logo-PNG1.png",
                            Name = "PSG",
                            StadiumId = 3
                        },
                        new
                        {
                            Id = 4,
                            Logo = "Real_Madrid_logo_PNG5.png",
                            Name = "Real Madrid",
                            StadiumId = 4
                        },
                        new
                        {
                            Id = 5,
                            Logo = "manchester_united_logo_PNG3.png",
                            Name = "Manchester United",
                            StadiumId = 5
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TicketHolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("TicketHolderId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64b18b2b-765f-472e-9ce7-57090eb97f69"),
                            IsReserved = false,
                            StadiumId = 1
                        },
                        new
                        {
                            Id = new Guid("e0daf9c7-8896-4ca8-b390-940caa84f136"),
                            IsReserved = false,
                            StadiumId = 1
                        },
                        new
                        {
                            Id = new Guid("442bd98b-9fa0-4714-ace2-031d0c2ff130"),
                            IsReserved = false,
                            StadiumId = 1
                        },
                        new
                        {
                            Id = new Guid("d784bad6-2144-4944-9ed5-73b123747767"),
                            IsReserved = false,
                            StadiumId = 1
                        },
                        new
                        {
                            Id = new Guid("9a83667f-8413-4170-b5ed-6ac25642e91a"),
                            IsReserved = false,
                            StadiumId = 2
                        },
                        new
                        {
                            Id = new Guid("a962d8b2-2efd-4bee-920a-bcc4cccabc00"),
                            IsReserved = false,
                            StadiumId = 2
                        },
                        new
                        {
                            Id = new Guid("c9d18dde-92ae-43fd-82eb-5f7998cc0cbd"),
                            IsReserved = false,
                            StadiumId = 2
                        },
                        new
                        {
                            Id = new Guid("6a933b09-6841-4115-a50d-2af0921163e9"),
                            IsReserved = false,
                            StadiumId = 2
                        },
                        new
                        {
                            Id = new Guid("d1d21b9c-a4df-4b2b-b6b0-b0551300d924"),
                            IsReserved = false,
                            StadiumId = 3
                        },
                        new
                        {
                            Id = new Guid("b401899c-d549-4307-9f84-20bf8c509769"),
                            IsReserved = false,
                            StadiumId = 3
                        },
                        new
                        {
                            Id = new Guid("9751c6dd-958e-4de2-8651-998ff9d613a3"),
                            IsReserved = false,
                            StadiumId = 3
                        },
                        new
                        {
                            Id = new Guid("476240c9-9c44-40e9-be59-ad3e2df75d77"),
                            IsReserved = false,
                            StadiumId = 3
                        },
                        new
                        {
                            Id = new Guid("703898d2-54f6-4253-98e9-0d558c3031e8"),
                            IsReserved = false,
                            StadiumId = 4
                        },
                        new
                        {
                            Id = new Guid("6f64097d-c713-49ac-b899-3259723b1a54"),
                            IsReserved = false,
                            StadiumId = 4
                        },
                        new
                        {
                            Id = new Guid("9cd75bce-23fd-4b4a-9f0d-28c221752bed"),
                            IsReserved = false,
                            StadiumId = 4
                        },
                        new
                        {
                            Id = new Guid("9b68fd76-7da6-4054-85d1-7b0ade6b793d"),
                            IsReserved = false,
                            StadiumId = 5
                        },
                        new
                        {
                            Id = new Guid("281f15c8-b8c2-4cb1-bd87-49beb77615e9"),
                            IsReserved = false,
                            StadiumId = 5
                        },
                        new
                        {
                            Id = new Guid("df1cbc9e-9e92-4aa3-a4ee-da7d8eb76960"),
                            IsReserved = false,
                            StadiumId = 5
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TrainingSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Training Ground 1",
                            Objectives = "Improve passing and teamwork",
                            TeamId = 1,
                            Time = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Training Ground 2",
                            Objectives = "Focus on defensive drills",
                            TeamId = 2,
                            Time = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Training Ground 3",
                            Objectives = "Improve fitness and conditioning",
                            TeamId = 3,
                            Time = new TimeSpan(0, 6, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Training Ground 4",
                            Objectives = "Work on set-piece routines",
                            TeamId = 4,
                            Time = new TimeSpan(0, 6, 20, 15, 0)
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Training Ground 5",
                            Objectives = "Improve shooting accuracy",
                            TeamId = 5,
                            Time = new TimeSpan(0, 1, 55, 22, 0)
                        });
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Trophy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Trophies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The FIFA World Cup is the most prestigious international football tournament held every four years.",
                            Name = "FIFA World Cup",
                            TeamId = 1,
                            Year = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "The UEFA Champions League is an annual club football competition organized by the Union of European Football Associations (UEFA).",
                            Name = "UEFA Champions League",
                            TeamId = 2,
                            Year = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "The FIFA Club World Cup is an international men's association football competition organized by the Fédération Internationale de Football Association (FIFA).",
                            Name = "FIFA Club World Cup",
                            TeamId = 3,
                            Year = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "The UEFA European Championship is the primary association football competition contested by the senior men's national teams of the members of UEFA.",
                            Name = "UEFA European Championship",
                            TeamId = 4,
                            Year = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "The Premier League is the top professional football league in England.",
                            Name = "Premier League",
                            TeamId = 5,
                            Year = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppUserMatch", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootTeamTracker.Data.Models.Match", null)
                        .WithMany()
                        .HasForeignKey("UpcomingGamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserPlayer", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootTeamTracker.Data.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("FavouritePlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserTeam", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootTeamTracker.Data.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("FavouriteTeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserTrainingSession", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootTeamTracker.Data.Models.TrainingSession", null)
                        .WithMany()
                        .HasForeignKey("TrainingSessionsToAttendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Injury", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.Player", "Player")
                        .WithOne("Injury")
                        .HasForeignKey("FootTeamTracker.Data.Models.Injury", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Match", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.News", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Player", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Team", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.News", "News")
                        .WithMany()
                        .HasForeignKey("NewsId");

                    b.HasOne("FootTeamTracker.Data.Models.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Ticket", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.Stadium", "Stadium")
                        .WithMany("Tickets")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootTeamTracker.Data.Models.AppUser", "TicketHolder")
                        .WithMany("TicketsReserved")
                        .HasForeignKey("TicketHolderId");

                    b.Navigation("Stadium");

                    b.Navigation("TicketHolder");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.TrainingSession", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.Team", "Team")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Trophy", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.Team", "Team")
                        .WithMany("Trophys")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FootTeamTracker.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.AppUser", b =>
                {
                    b.Navigation("TicketsReserved");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Player", b =>
                {
                    b.Navigation("Injury");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Stadium", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FootTeamTracker.Data.Models.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TrainingSessions");

                    b.Navigation("Trophys");
                });
#pragma warning restore 612, 618
        }
    }
}
